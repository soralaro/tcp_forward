project(GFW)
cmake_minimum_required(VERSION 3.5)
OPTION(WINDOWS "Build the project as windows" ON)
#set(PLATFORM android)
set(PLATFORM X86)
IF(WINDOWS)
add_definitions("-D_WIN64")
add_definitions("-D__MINGW64__")
add_definitions("-D_AMD64_")
add_compile_options(-std=c++11)
endif(WINDOWS)
#set(PLATFORM arm)
if (PLATFORM STREQUAL "android")
    set(ANDROID_NDK,"/czx/application/android-ndk-r19")
    set(CMAKE_TOOLCHAIN_FILE ${ANDROID_NDK}/build/cmake/android.toolchain.cmake)
elseif (PLATFORM STREQUAL "X86")
    set(CMAKE_C_COMPILER gcc)
    set(CMAKE_CXX_COMPILER g++)
elseif (PLATFORM STREQUAL "arm")
    set( CMAKE_C_COMPILER         /czx/application/gcc-linaro-arm-linux-gnueabihf-4.9_0614/bin/arm-linux-gnueabihf-gcc )
    set( CMAKE_CXX_COMPILER       /czx/application/gcc-linaro-arm-linux-gnueabihf-4.9_0614/bin/arm-linux-gnueabihf-g++ )
    SET( CMAKE_CXX_FLAGS           "${ARM_C_CXX_FLAGS} "   CACHE STRING "c++ flags" )
    SET( CMAKE_C_FLAGS             "${ARM_C_CXX_FLAGS} "   CACHE STRING "c flags" )
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS}  ")
endif ()

set(CMAKE_CXX_FLAGS_DEBUG   "$ENV{CXXFLAGS} -O0 -g -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wall -std=c++11 -fpermissive -fno-strict-aliasing -fopenmp")
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wall  -fopenmp")

include_directories(${CMAKE_SOURCE_DIR}/server)
link_directories(${LIBRARY_OUTPUT_PATH})
link_directories(${CMAKE_SOURCE_DIR}/server)

add_subdirectory(server)
add_subdirectory(client)

add_subdirectory(server_rand)
add_subdirectory(client_rand)
add_subdirectory(forward_server)
add_subdirectory(forward_dst)
add_subdirectory(forward_v2_client)
add_subdirectory(forward_v2_server)
add_subdirectory(server_test)
add_subdirectory(client_test)
